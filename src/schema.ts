/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/agents": {
    get: {
      parameters: {
        query: {
          CompanyId?: number;
          PageNumber?: number;
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedList<AgentDto>"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator) */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateAgentCommand"];
          "text/json": components["schemas"]["CreateAgentCommand"];
          "application/*+json": components["schemas"]["CreateAgentCommand"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["AgentDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/agents/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AgentDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Agent) */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateAgentCommand"];
          "text/json": components["schemas"]["UpdateAgentCommand"];
          "application/*+json": components["schemas"]["UpdateAgentCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AgentDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator, Agent) */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/auth/login": {
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["LoginCommand"];
          "text/json": components["schemas"]["LoginCommand"];
          "application/*+json": components["schemas"]["LoginCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TokenResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/companies/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CompanyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Agent) */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateCompanyCommand"];
          "text/json": components["schemas"]["UpdateCompanyCommand"];
          "application/*+json": components["schemas"]["UpdateCompanyCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CompanyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator) */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/companies": {
    get: {
      parameters: {
        query: {
          CountryId?: number;
          PageNumber?: number;
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedList<CompanyDto>"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator) */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateCompanyCommand"];
          "text/json": components["schemas"]["CreateCompanyCommand"];
          "application/*+json": components["schemas"]["CreateCompanyCommand"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CompanyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/countries": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CountryDto"])[];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/replies": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ReplyDto"])[];
          };
        };
      };
    };
  };
  "/api/skilltags": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SkillTagDto"])[];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/specialists": {
    get: {
      parameters: {
        query: {
          CountryId?: number;
          SkillTagsIds?: (number)[];
          PageNumber?: number;
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedList<SpecialistDto>"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateSpecialistCommand"];
          "text/json": components["schemas"]["CreateSpecialistCommand"];
          "application/*+json": components["schemas"]["CreateSpecialistCommand"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["SpecialistDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/specialists/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SpecialistDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Specialist) */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateSpecialistCommand"];
          "text/json": components["schemas"]["UpdateSpecialistCommand"];
          "application/*+json": components["schemas"]["UpdateSpecialistCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SpecialistDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator, Specialist) */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/vacancies/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["VacancyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Agent) */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateVacancyCommand"];
          "text/json": components["schemas"]["UpdateVacancyCommand"];
          "application/*+json": components["schemas"]["UpdateVacancyCommand"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["VacancyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Administrator, Agent) */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description No Content */
        204: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
  "/api/vacancies": {
    get: {
      parameters: {
        query: {
          CountryId?: number | null;
          CompanyId?: number | null;
          /** @description 0 = Closed, 1 = Open */
          Status?: components["schemas"]["VacancyStatus"];
          SkillTagsIds?: (number)[] | null;
          PageNumber?: number;
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedList<VacancyDto>"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
    /** (Auth roles: Agent) */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateVacancyCommand"];
          "text/json": components["schemas"]["CreateVacancyCommand"];
          "application/*+json": components["schemas"]["CreateVacancyCommand"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["VacancyDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AgentDto: {
      /** Format: int32 */
      id?: number;
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      position?: string | null;
      photo?: string | null;
      /** Format: int32 */
      companyId?: number;
    };
    CompanyDto: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      description?: string | null;
      logo?: string | null;
      /** Format: int32 */
      countryId?: number;
    };
    CountryDto: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    CreateAgentCommand: {
      firstName: string;
      lastName: string;
      email: string;
      password: string;
      /** Format: int32 */
      companyId: number;
    };
    CreateCompanyCommand: {
      name: string;
      description: string;
      logo?: string | null;
      /** Format: int32 */
      countryId: number;
    };
    CreateSpecialistCommand: {
      email: string;
      password: string;
      firstName: string;
      lastName: string;
      /** Format: int32 */
      countryId: number;
    };
    CreateVacancyCommand: {
      name: string;
      requirements: string;
      offerings: string;
      skillTagsIds?: (number)[] | null;
    };
    GetVacanciesQuery: {
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      countryId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      status?: components["schemas"]["VacancyStatus"];
      skillTagsIds?: (number)[] | null;
    };
    LoginCommand: {
      email: string;
      password: string;
    };
    "PaginatedList<AgentDto>": {
      items?: (components["schemas"]["AgentDto"])[] | null;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      totalCount?: number;
      hasPreviousPage?: boolean;
      hasNextPage?: boolean;
    };
    "PaginatedList<CompanyDto>": {
      items?: (components["schemas"]["CompanyDto"])[] | null;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      totalCount?: number;
      hasPreviousPage?: boolean;
      hasNextPage?: boolean;
    };
    "PaginatedList<SpecialistDto>": {
      items?: (components["schemas"]["SpecialistDto"])[] | null;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      totalCount?: number;
      hasPreviousPage?: boolean;
      hasNextPage?: boolean;
    };
    "PaginatedList<VacancyDto>": {
      items?: (components["schemas"]["VacancyDto"])[] | null;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      totalCount?: number;
      hasPreviousPage?: boolean;
      hasNextPage?: boolean;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown | undefined;
    };
    ReplyDto: {
      specialistMessage?: string | null;
      agentMessage?: string | null;
      /** Format: int32 */
      agentId?: number | null;
      agent?: components["schemas"]["AgentDto"];
      /** Format: int32 */
      specialistId?: number | null;
      specialist?: components["schemas"]["SpecialistDto"];
      /** Format: int32 */
      vacancyId?: number | null;
      vacancy?: components["schemas"]["VacancyDto"];
      replyStatus?: components["schemas"]["ReplyStatus"];
      replyType?: components["schemas"]["ReplyType"];
    };
    /**
     * Format: int32 
     * @description 0 = Waiting, 1 = Approve, 2 = Reject 
     * @enum {integer}
     */
    ReplyStatus: 0 | 1 | 2;
    /**
     * Format: int32 
     * @description 0 = Specialist, 1 = Vacancy 
     * @enum {integer}
     */
    ReplyType: 0 | 1;
    SkillTagDto: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    SpecialistDto: {
      /** Format: int32 */
      id?: number;
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      bio?: string | null;
      skills?: string | null;
      experience?: string | null;
      photo?: string | null;
      /** Format: int32 */
      countryId?: number;
      skillTags?: (components["schemas"]["SkillTagDto"])[] | null;
    };
    TokenResponse: {
      token?: string | null;
    };
    UpdateAgentCommand: {
      /** Format: int32 */
      id: number;
      firstName?: string | null;
      lastName?: string | null;
      position?: string | null;
      photo?: string | null;
    };
    UpdateCompanyCommand: {
      /** Format: int32 */
      id: number;
      name?: string | null;
      description?: string | null;
      logo?: string | null;
    };
    UpdateSpecialistCommand: {
      /** Format: int32 */
      id: number;
      firstName?: string | null;
      lastName?: string | null;
      bio?: string | null;
      skills?: string | null;
      experience?: string | null;
      photo?: string | null;
      skillTagsIds?: (number)[] | null;
    };
    UpdateVacancyCommand: {
      /** Format: int32 */
      id: number;
      name?: string | null;
      requirements?: string | null;
      offerings?: string | null;
      status?: components["schemas"]["VacancyStatus"];
      skillTagsIds?: (number)[] | null;
    };
    VacancyDto: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      requirements?: string | null;
      offerings?: string | null;
      status?: components["schemas"]["VacancyStatus"];
      /** Format: int32 */
      companyId?: number;
      skillTags?: (components["schemas"]["SkillTagDto"])[] | null;
    };
    /**
     * Format: int32 
     * @description 0 = Closed, 1 = Open 
     * @enum {integer}
     */
    VacancyStatus: 0 | 1;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
